name: CI/CD with SonarQube and Docker

on:
  push:
    branches:
      - main   # Sirf main branch pe push hote hi trigger hoga

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
         fetch-depth: 0

      # Step 2: Setup Node.js (JS project ke liye)
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: SonarQube Scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          args: >
            -Dsonar.projectKey=student-reg-1
            -Dsonar.sources=.
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  # Step 3.5: Copy full project to EC2
      - name: Copy full project to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST_PUBLIC_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: "/home/ubuntu/student-app"
          strip_components: 0

      # Step 4: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t student-reg:latest .
      # Step 5: Copy docker-compose.yml to EC2
      # - name: Copy Docker Compose file to EC2
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST_PUBLIC_IP }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     source: "docker-compose.yml"
      #     target: "/home/ubuntu"
          
      # Step 7: Copy Dockerfile to EC2
      # - name: Copy Dockerfile to EC2
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST_PUBLIC_IP }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     source: "Dockerfile"
      #     target: "/home/ubuntu"
          
      # - name: Copy Env file to EC2
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST_PUBLIC_IP }}
      #     username: ${{ secrets.EC2_USER }}
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     source: ".env.example"
      #     target: "/home/ubuntu"


      - name: Debug - List files on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PUBLIC_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: ls -l /home/ubuntu


     # Step 6: Deploy on EC2
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_PUBLIC_IP }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd student-app
            echo "Stopping old containers..."
            docker compose down || true
            echo "Starting new containers..."
            docker compose up -d --build
